#!/usr/bin/env python

import concurrent.futures
import gmpy2
import sys


#//******************************************************************************
#//
#//  isPrime
#//
#//******************************************************************************

def isPrime( n ):
    return True if gmpy2.is_bpsw_prp( n ) else False


# //******************************************************************************
# //
# //  getNextPrimeCandidate
# //
# //  p is the next prime candidate.  Starting with ( p - 10 ) mod 210, we only
# //  need to check 43 values out of the next 210, which eliminates all multiples
# //  of 2, 3, 5, and 7 and saves us a lot of unnecessary checking.
# //
# //  We only need to check for a prime if ( p - 10 ) mod 210 is 1, 3, 7, 9, 13, 19,
# //  21, 27 31, 33, 37, 43, 49, 51, 57, 61, 63, 69, 73, 79, 87, 91, 93, 97, 99,
# //  103, 117, 121, 127, 129, 139, 141, 147, 153, 157, 163, 169, 171, 181, 183,
# //  187, 189, or 201.
# //
# //******************************************************************************

def getNextPrimeCandidate( p ):
    f = ( p - 10 ) % 210

    moduloTable = {
        0 : 1,
        1 : 2, 2 : 1,
        3 : 4, 4 : 3, 5 : 2, 6 : 1,
        7 : 2, 8 : 1,
        9 : 4, 10 : 3, 11 : 2, 12 : 1,
        13 : 6, 14 : 5, 15 : 4, 16 : 3, 17 : 2, 18 : 1,
        19 : 2, 20 : 1,
        21 : 6, 22 : 5, 23 : 4, 24 : 3, 25 : 2, 26 : 1,
        27 : 4, 28 : 3, 29 : 2, 30 : 1,
        31 : 2, 32 : 1,
        33 : 4, 34 : 3, 35 : 2, 36 : 1,
        37 : 6, 38 : 5, 39 : 4, 40 : 3, 41 : 2, 42 : 1,
        43 : 6, 44 : 5, 45 : 4, 46 : 3, 47 : 2, 48 : 1,
        49 : 2, 50 : 1,
        51 : 6, 52 : 5, 53 : 4, 54 : 3, 55 : 2, 56 : 1,
        57 : 4, 58 : 3, 59 : 2, 60 : 1,
        61 : 2, 62 : 1,
        63 : 6, 64 : 5, 65 : 4, 66 : 3, 67 : 2, 68 : 1,
        69 : 4, 70 : 3, 71 : 2, 72 : 1,
        73 : 6, 74 : 5, 75 : 4, 76 : 3, 77 : 2, 78 : 1,
        79 : 8, 80 : 7, 81 : 6, 82 : 5, 83 : 4, 84 : 3, 85 : 2, 86 : 1,
        87 : 4, 88 : 3, 89 : 2, 90 : 1,
        91 : 2, 92 : 1,
        93 : 4, 94 : 3, 95 : 2, 96 : 1,
        97 : 2, 98 : 1,
        99 : 4, 100 : 3, 101 : 2, 102 : 1,
        103 : 14, 104 : 13, 105 : 12, 106 : 11, 107 : 10, 108 : 9, 109 : 8, 110 : 7, 111 : 6, 112 : 5, 113 : 4, 114 : 3, 115 : 2, 116 : 1,
        117 : 4, 118 : 3, 119 : 2, 120 : 1,
        121 : 6, 122 : 5, 123 : 4, 124 : 3, 125 : 2, 126 : 1,
        127 : 2, 128 : 1,
        129 : 10, 130 : 9, 131 : 8, 132 : 7, 133 : 6, 134 : 5, 135 : 4, 136 : 3, 137 : 2, 138 : 1,
        139 : 2, 140 : 1,
        141 : 6, 142 : 5, 143 : 4, 144 : 3, 145 : 2, 146 : 1,
        147 : 6, 148 : 5, 149 : 4, 150 : 3, 151 : 2, 152 : 1,
        153 : 4, 154 : 3, 155 : 2, 156 : 1,
        157 : 6, 158 : 5, 159 : 4, 160 : 3, 161 : 2, 162 : 1,
        163 : 6, 164 : 5, 165 : 4, 166 : 3, 167 : 2, 168 : 1,
        169 : 2, 170 : 1,
        171 : 10, 172 : 9, 173 : 8, 174 : 7, 175 : 6, 176 : 5, 177 : 4, 178 : 3, 179 : 2, 180 : 1,
        181 : 2, 182 : 1,
        183 : 4, 184 : 3, 185 : 2, 186 : 1,
        187 : 2, 188 : 1,
        189 : 12, 190 : 11, 191 : 10, 192 : 9, 193 : 8, 194 : 7, 195 : 6, 196 : 5, 197 : 4, 198 : 3, 199 : 2, 200 : 1,
        201 : 10, 202 : 9, 203 : 8, 204 : 7, 205 : 6, 206 : 5, 207 : 4, 208 : 3, 209 : 2
    }

    return p + moduloTable[ f ]


#//******************************************************************************
#//
#//  makePrimeBatch
#//
#//******************************************************************************

batchSize = 100000

def makePrimeBatch( start ):
    p = getNextPrimeCandidate( start )
    stop = start + batchSize

    primes = [ ]

    while p <= stop:
        if isPrime( p ):
            primes.append( p )

        p = getNextPrimeCandidate( p )

    return primes


#//******************************************************************************
#//
#//  makePrimes
#//
#//******************************************************************************

def makePrimes( index, prime, count, max_workers=8 ):
    fileName = '{:05}-{:05}.txt'.format( index // 1000000, index // 1000000 + 50 )
    file = open( fileName, "w" )

    p = prime
    n = index

    while True:
        primes = [ ]

        with concurrent.futures.ProcessPoolExecutor( max_workers=max_workers ) as executor:
            for batch in executor.map( makePrimeBatch, range( p, p + batchSize * 100, batchSize ) ):
                primes.extend( batch )

        finished = sorted( primes )

        for p in finished:
            n += 1
            file.write( '{},{}\n'.format( n, p ) )

            if n == index + count:
                print( '\r{:,}'.format( n ), end='' )
                file.close( )
                return n, p

        print( '\r{:,} - {:,}'.format( n, p ), end='' )

        p = finished[ -1 ]


#//******************************************************************************
#//
#//  main
#//
#//******************************************************************************

def main( ):
    if len( sys.argv ) < 3:
        print( 'usage:  makePrimes index prime' )

    index = sys.argv[ 1 ]
    index = ''.join( [ i for i in index if i not in ',' ] )
    index = int( index )

    prime = sys.argv[ 2 ]
    prime = ''.join( [ i for i in prime if i not in ',' ] )
    prime = int( prime )

    print( )

    while True:
        index, prime = makePrimes( index, prime, 50000000, 4 )


#//******************************************************************************
#//
#//  __main__
#//
#//******************************************************************************

if __name__ == '__main__':
    main( )

