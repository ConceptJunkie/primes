#!/usr/bin/env python

import gmpy2
import os

from bitarray import bitarray

inputDirectory = "d:\\primes"
#outputDirectory = "c:\\sys\\ut\\rpn\\rpn"
outputDirectory = "d:\\primes"


#//******************************************************************************
#//
#//  isPrime
#//
#//******************************************************************************

def isPrime( n ):
    return True if gmpy2.is_bpsw_prp( n ) else False


#//******************************************************************************
#//
#//  readPrimeNumbers
#//
#//******************************************************************************

def readPrimeDataFiles( firstDataFile, lastDataFile ):
    inputList = [ ]

    current = firstDataFile

    while current <= lastDataFile:
        inputList.append( inputDirectory + os.sep + '{:05}-{:05}.txt'.format( current, current + 50 ) )
        current += 50

    for fileName in inputList:
        with open( fileName, 'r' ) as file:
            for line in file:
                items = line[ : -1 ].split( ',' )

                yield int( items[ 0 ] ), int( items[ 1 ] )


#//******************************************************************************
#//
#//  readPrimeNumbers
#//
#//******************************************************************************

def readPrimeNumbersOLD( ):
    decodeArray = [ 1, 3, 7, 9, 13, 19, 21, 27, 31, 33, 37, 43, 49, 51, 57, 61, 63, 69,
                    73, 79, 87, 91, 93, 97, 99, 103, 111, 117, 121, 127, 129, 133, 139,
                    141, 147, 153, 157, 159, 163, 169, 171, 177, 181, 183, 187, 189,
                    199, 201 ]

    bits = bitarray( )

    primeIndex = 4
    base = 10
    chunkSize = 48
    baseChunkSize = 210
    primeBase = -200       # The very first time through will kick it up to 10.

    yield 1, 2
    yield 2, 3
    yield 3, 5
    yield 4, 7

    primesFile = open( inputDirectory + os.sep + 'primes.bin', 'rb' )

    while True:
        try:
            bits = bitarray( )
            bits.fromfile( primesFile, 48000 )
        except:
            break

        for index, bit in enumerate( bits ):
            #print( 'index', index, 'bit', bit )

            if index % chunkSize == 0:
                primeBase += baseChunkSize

            if bit:
                prime = primeBase + decodeArray[ index % chunkSize ]
                primeIndex += 1
                yield primeIndex, prime

        base += chunkSize

    primesFile.close( )


#//******************************************************************************
#//
#//  readPrimeNumbers
#//
#//******************************************************************************

def readPrimeNumbers( end=None ):
    decodeArray = [
        1, 5, 7, 11, 17, 19, 25, 29, 31, 35, 41, 47, 49, 55, 59, 61, 67, 71, 77, 85, 89, 91, 95, 97, 101, 115, 119,
        125, 127, 137, 139, 145, 151, 155, 157, 161, 167, 169, 179, 181, 185, 187, 199, 209, 211, 215, 217, 221, 227,
        229, 235, 239, 245, 251, 257, 259, 265, 269, 271, 277, 281, 287, 295, 299, 301, 305, 311, 319, 325, 335, 337,
        341, 347, 349, 355, 361, 365, 367, 371, 377, 379, 385, 389, 391, 397, 407, 409, 419, 421, 425, 427, 431, 437,
        445, 449, 451, 455, 467, 469, 475, 479, 481, 487, 491, 497, 509, 511, 515, 517, 521, 529, 535, 539, 545, 547,
        551, 557, 559, 565, 575, 577, 581, 587, 589, 595, 599, 601, 605, 607, 617, 619, 629, 631, 635, 641, 647, 649,
        655, 661, 665, 671, 677, 679, 685, 689, 691, 697, 701, 707, 715, 719, 721, 727, 731, 739, 745, 749, 755, 757,
        761, 767, 775, 781, 785, 787, 797, 799, 805, 809, 811, 815, 817, 827, 829, 839, 841, 845, 847, 851, 859, 865,
        869, 871, 875, 881, 887, 889, 895, 899, 907, 911, 917, 925, 929, 931, 935, 937, 941, 949, 955, 959, 965, 971,
        977, 979, 985, 991, 995, 997, 1001, 1007, 1009, 1015, 1019, 1021, 1025, 1027, 1037, 1039, 1049, 1051, 1057,
        1061, 1067, 1069, 1075, 1079, 1081, 1085, 1091, 1097, 1105, 1109, 1111, 1117, 1127, 1135, 1139, 1141, 1145,
        1147, 1151, 1159, 1169, 1175, 1177, 1181, 1189, 1195, 1201, 1205, 1207, 1211, 1217, 1219, 1225, 1229, 1235,
        1237, 1247, 1249, 1259, 1261, 1265, 1267, 1271, 1277, 1279, 1285, 1289, 1291, 1295, 1301, 1307, 1309, 1315,
        1321, 1327, 1331, 1337, 1345, 1349, 1351, 1355, 1357, 1361, 1369, 1375, 1379, 1387, 1391, 1397, 1399, 1405,
        1411, 1415, 1417, 1421, 1427, 1435, 1439, 1441, 1445, 1447, 1457, 1459, 1469, 1471, 1475, 1477, 1481, 1487,
        1489, 1499, 1501, 1505, 1511, 1519, 1525, 1529, 1531, 1537, 1541, 1547, 1555, 1559, 1565, 1567, 1571, 1579,
        1585, 1589, 1595, 1597, 1601, 1607, 1609, 1615, 1621, 1625, 1631, 1637, 1639, 1645, 1651, 1655, 1657, 1667,
        1669, 1679, 1681, 1685, 1687, 1691, 1697, 1699, 1705, 1709, 1711, 1721, 1727, 1729, 1735, 1739, 1741, 1747,
        1751, 1757, 1765, 1769, 1771, 1775, 1777, 1789, 1795, 1799, 1805, 1807, 1811, 1817, 1819, 1831, 1835, 1837,
        1841, 1849, 1855, 1859, 1861, 1865, 1867, 1877, 1879, 1889, 1895, 1897, 1901, 1907, 1909, 1915, 1919, 1921,
        1925, 1931, 1937, 1939, 1945, 1949, 1951, 1961, 1967, 1975, 1981, 1985, 1987, 1991, 1999, 2005, 2009, 2015,
        2017, 2021, 2027, 2029, 2035, 2041, 2047, 2051, 2057, 2059, 2065, 2069, 2071, 2075, 2077, 2087, 2099, 2101,
        2105, 2107, 2117, 2119, 2125, 2129, 2131, 2135, 2141, 2147, 2149, 2159, 2161, 2167, 2171, 2185, 2189, 2191,
        2195, 2197, 2201, 2209, 2215, 2219, 2225, 2227, 2231, 2237, 2239, 2245, 2251, 2255, 2257, 2261, 2267, 2269,
        2275, 2279, 2281, 2285, 2297, 2299
    ]

    bits = bitarray( )

    primeIndex = 5
    base = 12
    chunkSize = 480
    baseChunkSize = 2310
    primeBase = -2298       # The very first time through will kick it up to 12.

    if not end:
        end = 1000000000 # 40000000000

    yield 1, 2
    yield 2, 3
    yield 3, 5
    yield 4, 7
    yield 5, 11

    primesFile = open( inputDirectory + os.sep + 'primes.bin', 'rb' )

    quit = False

    while True:
        try:
            bits = bitarray( )
            bits.fromfile( primesFile, 48000 )
        except:
            break

        for index, bit in enumerate( bits ):
            #print( 'index', index, 'bit', bit )

            if index % chunkSize == 0:
                primeBase += baseChunkSize

            if bit:
                prime = primeBase + decodeArray[ index % chunkSize ]
                primeIndex += 1
                yield primeIndex, prime

                if primeIndex == end:
                    quit = True
                    break

        if quit:
            break

        base += chunkSize

    primesFile.close( )

